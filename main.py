import os
import logging
import threading
import requests
import time
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ================== #
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Self-ping –¥–ª—è Render
def self_ping():
    while True:
        try:
            requests.get("https://–í–ê–®_–ë–û–¢.onrender.com")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π URL!
            logger.info("Self-ping –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ self-ping: {e}")
        time.sleep(240)

app = Flask(__name__)
@app.route('/')
def wake_up():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ================== #
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPPORT_LINK = "https://t.me/Maksimmm16"
PARTNER_LINK = "https://1wilib.life/?open=register&p=2z3v"
VIP_BOT_LINK = "https://t.me/your_vip_bot"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É VIP-–±–æ—Ç–∞
CHANNEL_LINK = "https://t.me/your_channel"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞
REG_CHANNEL = "@+4T5JdFC8bzBkZmIy"  # –ö–∞–Ω–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
DEPOSIT_CHANNEL = "@–≤–∞—à_–∫–∞–Ω–∞–ª_–¥–µ–ø–æ–∑–∏—Ç–æ–≤"  # –ö–∞–Ω–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤

# ================== –¢–ï–ö–°–¢–´ ================== #
LEVELS = {
    1: {
        "text": (
            "üé∞ <b>–£—Ä–æ–≤–µ–Ω—å 1: 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏—è!</b>\n\n"
            "üî• <i>–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è - –±–æ–Ω—É—Å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã!</i>\n\n"
            "–í—ã–∏–≥—Ä—ã—à–∏ –¥–æ <b>5000‚ÇΩ</b> –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π!"
        ),
        "attempts": 3,
        "deposit": 0,
        "next_level_text": "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –£—Ä–æ–≤–µ–Ω—å 2 –≤–Ω–µ—Å–∏—Ç–µ –¥–µ–ø–æ–∑–∏—Ç –æ—Ç 500‚ÇΩ"
    },
    2: {
        "text": (
            "üí∞ <b>–£—Ä–æ–≤–µ–Ω—å 2: 5 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 500‚ÇΩ)</b>\n\n"
            "‚ö° <i>–°–µ–π—á–∞—Å —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–¥–∞–µ—Ç –¥–∂–µ–∫–ø–æ—Ç—ã!</i>\n\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: <b>15000‚ÇΩ</b>"
        ),
        "attempts": 5,
        "deposit": 500,
        "next_level_text": "–î–ª—è –£—Ä–æ–≤–Ω—è 3 —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–ø–æ–∑–∏—Ç –æ—Ç 2000‚ÇΩ"
    },
    3: {
        "text": (
            "üöÄ <b>–£—Ä–æ–≤–µ–Ω—å 3: 10 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 2000‚ÇΩ)</b>\n\n"
            "üíé <i>VIP-—Å—Ç–∞—Ç—É—Å: +2 –±–æ–Ω—É—Å–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏—è!</i>\n\n"
            "–®–∞–Ω—Å –Ω–∞ –¥–∂–µ–∫–ø–æ—Ç <b>—É–≤–µ–ª–∏—á–∏–ª—Å—è –≤ 3 —Ä–∞–∑–∞</b>!"
        ),
        "attempts": 10,
        "deposit": 2000,
        "next_level_text": "–î–ª—è –£—Ä–æ–≤–Ω—è 4 —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–ø–æ–∑–∏—Ç –æ—Ç 5000‚ÇΩ"
    },
    4: {
        "text": (
            "ü§ë <b>–£—Ä–æ–≤–µ–Ω—å 4: 15 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 5000‚ÇΩ)</b>\n\n"
            "‚ú® <i>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à!</i>\n\n"
            "–ö–∞–∂–¥–æ–µ 3-–µ –≤—Ä–∞—â–µ–Ω–∏–µ - <b>—Å—É–ø–µ—Ä–ø—Ä–∏–∑</b>!"
        ),
        "attempts": 15,
        "deposit": 5000,
        "next_level_text": "–§–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: –¥–µ–ø–æ–∑–∏—Ç –æ—Ç 15000‚ÇΩ"
    },
    5: {
        "text": (
            "üèÜ <b>–£—Ä–æ–≤–µ–Ω—å 5: 25 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 15000‚ÇΩ)</b>\n\n"
            "üí£ <i>–ö—Ä–∏—Å—Ç–∞–ª—å–Ω–æ —á–∏—Å—Ç–∞—è —Ä—É–ª–µ—Ç–∫–∞ - –±–µ–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤!</i>\n\n"
            "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –∫ <b>VIP-–¥–æ—Å—Ç—É–ø—É</b>!"
        ),
        "attempts": 25,
        "deposit": 15000,
        "next_level_text": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π!"
    }
}

# ================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ================== #
def get_start_keyboard():
    return [
        [InlineKeyboardButton("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_LINK)],
        [InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="check_reg")],
        [InlineKeyboardButton("‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="help")]
    ]

def get_help_keyboard():
    return [
        [InlineKeyboardButton("üìû –ú–µ–Ω–µ–¥–∂–µ—Ä", url=SUPPORT_LINK)],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]

def get_level_keyboard(level):
    web_app_url = "https://your-webapp.com/roulette"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
    return [
        [InlineKeyboardButton(
            f"üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É ({LEVELS[level]['attempts']} –ø–æ–ø—ã—Ç–æ–∫)",
            web_app=WebAppInfo(url=f"{web_app_url}?level={level}")
        )],
        [InlineKeyboardButton("üíé VIP-–¥–æ—Å—Ç—É–ø", url=PARTNER_LINK)],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", url=SUPPORT_LINK)]
    ]

def get_deposit_failed_keyboard(level):
    return [
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url=PARTNER_LINK)],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç", callback_data=f"check_dep_{level}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_level_{level-1}" if level > 1 else "back_to_start")]
    ]

def get_vip_keyboard():
    return [
        [InlineKeyboardButton("üíé –ó–∞–±—Ä–∞—Ç—å VIP-—Å—Ç–∞—Ç—É—Å", url=PARTNER_LINK)],
        [InlineKeyboardButton("üéÅ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑", url=VIP_BOT_LINK)],
        [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", url=SUPPORT_LINK)]
    ]

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ================== #
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –ö–∞–∑–∏–Ω–æ!</b>\n\n"
        "üîπ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä—É–ª–µ—Ç–∫–µ:\n"
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç!)\n"
        "2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏—è\n\n"
        "üî• <i>–ü–µ—Ä–≤—ã–µ 50 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–ª—É—á–∞—é—Ç +1 –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ!</i>",
        reply_markup=InlineKeyboardMarkup(get_start_keyboard()),
        parse_mode="HTML"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üõ† <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n"
        "1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç</b> (—Å—Ç–∞—Ä—ã–µ –Ω–µ –ø–æ–¥–æ–π–¥—É—Ç)\n"
        "3. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç\n\n"
        "–î–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(get_help_keyboard()),
        parse_mode="HTML"
    )

async def check_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    registered = False
    
    async for msg in context.bot.get_chat_history(REG_CHANNEL, limit=100):
        if str(user_id) in msg.text:
            registered = True
            break
    
    if registered:
        await show_level(query, 1)
    else:
        await query.edit_message_text(
            "‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã:\n"
            "1. –°–æ–∑–¥–∞–ª–∏ <b>–Ω–æ–≤—ã–π</b> –∞–∫–∫–∞—É–Ω—Ç\n"
            "2. –ü–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –∫–Ω–æ–ø–∫–∏ ¬´üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª\n\n"
            "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", url=PARTNER_LINK)],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]),
            parse_mode="HTML"
        )

async def check_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    level = int(query.data.split('_')[2])
    user_id = query.from_user.id
    deposit_found = False
    
    async for msg in context.bot.get_chat_history(DEPOSIT_CHANNEL, limit=100):
        if str(user_id) in msg.text:
            deposit_amount = int(msg.text.split(':')[-1].strip())
            if deposit_amount >= LEVELS[level]['deposit']:
                deposit_found = True
                break
    
    if deposit_found:
        await show_level(query, level)
    else:
        await query.edit_message_text(
            f"‚ö†Ô∏è <b>–î–µ–ø–æ–∑–∏—Ç –æ—Ç {LEVELS[level]['deposit']}‚ÇΩ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
            f"–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {level} —Ç—Ä–µ–±—É–µ—Ç—Å—è:\n"
            f"1. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç {LEVELS[level]['deposit']}‚ÇΩ\n"
            f"2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:",
            reply_markup=InlineKeyboardMarkup(get_deposit_failed_keyboard(level)),
            parse_mode="HTML"
        )

async def show_level(query, level):
    await query.edit_message_text(
        LEVELS[level]["text"],
        reply_markup=InlineKeyboardMarkup(get_level_keyboard(level)),
        parse_mode="HTML"
    )

async def level_complete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    current_level = int(query.data.split('_')[1])
    next_level = current_level + 1
    
    if next_level <= 5:
        await query.edit_message_text(
            f"üèÖ <b>–£—Ä–æ–≤–µ–Ω—å {current_level} –ø—Ä–æ–π–¥–µ–Ω!</b>\n\n"
            f"{LEVELS[next_level]['next_level_text']}\n\n"
            "‚è≥ <i>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ 24 —á–∞—Å–∞!</i>",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    f"üí≥ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {next_level}", 
                    callback_data=f"check_dep_{next_level}"
                )],
                [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", url=SUPPORT_LINK)]
            ]),
            parse_mode="HTML"
        )
    else:
        await show_vip_message(query)

async def show_vip_message(query):
    await query.edit_message_text(
        "üíé <b>–°–ï–ù–°–ê–¶–ò–Ø! –í–´ –í–´–ò–ì–†–ê–õ–ò VIP-–î–û–°–¢–£–ü!</b> üíé\n\n"
        "üî• <i>–í—ã –≤–æ—à–ª–∏ –≤ —ç–ª–∏—Ç–Ω—ã–π 0.01% –∏–≥—Ä–æ–∫–æ–≤!</i> üî•\n\n"
        "–° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:\n"
        "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞\n"
        "‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã –¥–æ 500%\n"
        "‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n\n"
        "‚è≥ <i>–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ VIP-—Å—Ç–∞—Ç—É—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!</i>",
        reply_markup=InlineKeyboardMarkup(get_vip_keyboard()),
        parse_mode="HTML"
    )

async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start(query.message, context)

async def back_to_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    level = int(query.data.split('_')[3])
    await show_level(query, level)

# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ================== #
def run_bot():
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
    app.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    app.add_handler(CallbackQueryHandler(check_registration, pattern="^check_reg$"))
    app.add_handler(CallbackQueryHandler(check_deposit, pattern="^check_dep_"))
    app.add_handler(CallbackQueryHandler(level_complete, pattern="^complete_"))
    app.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))
    app.add_handler(CallbackQueryHandler(back_to_level, pattern="^back_to_level_"))
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    app.run_polling(
        allowed_updates=Update.ALL_TYPES,
        close_loop=False,
        stop_signals=[]
    )

if __name__ == "__main__":
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if not os.environ.get("BOT_STARTED"):
        os.environ["BOT_STARTED"] = "1"
        threading.Thread(target=self_ping, daemon=True).start()
        threading.Thread(target=app.run, kwargs={'host':'0.0.0.0','port':8080}, daemon=True).start()
        run_bot()
