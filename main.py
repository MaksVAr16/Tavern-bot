import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPPORT_LINK = "https://t.me/Maksimmm16"
PARTNER_LINK = "https://1wilib.life/?open=register&p=2z3v"
REG_CHANNEL = "@+4T5JdFC8bzBkZmIy"  # –í–∞—à –∫–∞–Ω–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
DEPOSIT_CHANNEL = "@+Vkx46VQSlTk3ZmYy"  # –í–∞—à –∫–∞–Ω–∞–ª –¥–µ–ø–æ–∑–∏—Ç–æ–≤

# –¢–µ–∫—Å—Ç—ã —Å FOMO
TEXTS = {
    "start": (
        "üé∞ <b>–¢–≤–æ–π –≤—ã–∏–≥—Ä—ã—à —É–∂–µ –±–ª–∏–∑–∫–æ!</b>\n\n"
        "1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
        "2Ô∏è‚É£ –ü–æ–ø–æ–ª–Ω–∏ —Å—á—ë—Ç –æ—Ç 500‚ÇΩ\n"
        "3Ô∏è‚É£ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ –∑–∞–±–∏—Ä–∞–π –ø—Ä–∏–∑—ã!\n\n"
        "üî• <i>–ü–µ—Ä–≤—ã–µ 10 –∏–≥—Ä–æ–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–∞—é—Ç —É–¥–≤–æ–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å!</i>"
    ),
    "registered": (
        "üéâ <b>–¢—ã –≤ –∏–≥—Ä–µ!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –ø–æ–ø–æ–ª–Ω–∏ —Å—á—ë—Ç –æ—Ç 500‚ÇΩ ‚Äî –∏ –∫—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É!\n\n"
        "‚ö° <i>–°–µ–π—á–∞—Å –∫–∞–∑–∏–Ω–æ –¥–∞—ë—Ç –±–æ–Ω—É—Å—ã –≤ 2 —Ä–∞–∑–∞ —á–∞—â–µ!</i>"
    ),
    "deposit": (
        "üí∞ <b>–¢–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç –∑–∞—á–∏—Å–ª–µ–Ω!</b>\n\n"
        "–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –∫—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É –∏ —Å—Ä—ã–≤–∞—Ç—å –∫—É—à!\n\n"
        "üöÄ <i>–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —É–∂–µ —Ä–∞–∑–æ–≥—Ä–µ—Ç...</i>"
    ),
    "prize": (
        "üéÅ <b>–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {prize}!</b>\n\n"
        "–≠—Ç–æ—Ç –ø—Ä–∏–∑ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ 5% –∏–≥—Ä–æ–∫–æ–≤ ‚Äî —Ç—ã –≤–µ–∑—É–Ω—á–∏–∫!\n\n"
        "‚è≥ <i>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç...</i>"
    ),
    "vip_prize": (
        "üíé <b>VIP-–î–û–°–¢–£–ü –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!</b>\n\n"
        "–¢—ã –≤–æ—à—ë–ª –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–± –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!\n\n"
        "üîí <i>–ú–µ—Å—Ç–∞ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –¥–ª—è 3 –∏–≥—Ä–æ–∫–æ–≤...</i>"
    )
}

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ URL)
IMAGES = {
    "start": "https://i.ibb.co/.../start.jpg",
    "registered": "https://i.ibb.co/.../reg.jpg",
    "deposit": "https://i.ibb.co/.../deposit.jpg",
    "prize": "https://i.ibb.co/.../prize.jpg",
    "vip": "https://i.ibb.co/.../vip.jpg"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_LINK)],
        [InlineKeyboardButton("üí∞ –Ø –ø–æ–ø–æ–ª–Ω–∏–ª —Å—á—ë—Ç", callback_data="check_deposit")]
    ]
    await update.message.reply_photo(
        photo=IMAGES["start"],
        caption=TEXTS["start"],
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def check_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    async for msg in context.bot.get_chat_history(REG_CHANNEL, limit=100):
        if str(user_id) in msg.text:
            keyboard = [
                [InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É", callback_data="spin")],
                [InlineKeyboardButton("üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç", url=PARTNER_LINK)]
            ]
            await update.message.reply_photo(
                photo=IMAGES["registered"],
                caption=TEXTS["registered"],
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
            return
    
    await update.message.reply_text("‚ùå –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

async def check_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    async for msg in context.bot.get_chat_history(DEPOSIT_CHANNEL, limit=100):
        if str(user_id) in msg.text:
            keyboard = [[InlineKeyboardButton("üé° –ö–†–£–¢–ò–¢–¨ –†–£–õ–ï–¢–ö–£", callback_data="spin")]]
            await update.message.reply_photo(
                photo=IMAGES["deposit"],
                caption=TEXTS["deposit"],
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
            return
    
    await update.message.reply_text("‚ÑπÔ∏è –ü–æ–ø–æ–ª–Ω–∏ —Å—á—ë—Ç –æ—Ç 500‚ÇΩ, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!")

async def send_prize(update: Update, prize: str, is_vip: bool = False):
    if is_vip:
        keyboard = [
            [InlineKeyboardButton("üíé –í–û–ô–¢–ò –í VIP", url="https://t.me/your_bot")],
            [InlineKeyboardButton("üí∞ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å", url=PARTNER_LINK)]
        ]
        await update.message.reply_photo(
            photo=IMAGES["vip"],
            caption=TEXTS["vip_prize"],
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    else:
        keyboard = [
            [InlineKeyboardButton("üéÅ –ó–ê–ë–†–ê–¢–¨ –ü–†–ò–ó", callback_data=f"claim_{prize}")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", url=SUPPORT_LINK)]
        ]
        await update.message.reply_photo(
            photo=IMAGES["prize"],
            caption=TEXTS["prize"].format(prize=prize),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )

async def spin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prize = "–§—Ä–∏—Å–ø–∏–Ω 50$"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ª–æ–≥–∏–∫—É –∏–∑ —Ä—É–ª–µ—Ç–∫–∏
    await send_prize(update, prize)

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(check_registration, pattern="^check_reg$"))
    app.add_handler(CallbackQueryHandler(check_deposit, pattern="^check_deposit$"))
    app.add_handler(CallbackQueryHandler(spin_handler, pattern="^spin$"))
    
    app.run_polling()

if __name__ == "__main__":
    main()