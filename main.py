import os
import logging
import asyncio
import psycopg2
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler
from flask import Flask, request
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥
BOT_TOKEN = os.getenv("BOT_TOKEN")
PARTNER_URL = "https://1wilib.life/?open=register&p=2z3v"
SUPPORT_LINK = " https://t.me/Maksimmm16 "
MINI_APP_URL = "https://t.me/Tavern_Rulet_bot/ere "
DATABASE_URL = os.getenv("DATABASE_URL")

if not DATABASE_URL:
    logger.warning("‚ö†Ô∏è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env!")

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = psycopg2.connect(DATABASE_URL)
        with conn.cursor() as cursor:
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS registered_users (
                    user_id TEXT PRIMARY KEY,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            conn.commit()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    finally:
        if 'conn' in locals():
            conn.close()


def save_user_id(user_id: str):
    try:
        conn = psycopg2.connect(DATABASE_URL)
        with conn.cursor() as cursor:
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é user_id={user_id} –≤ –ë–î")
            cursor.execute(
                "INSERT INTO registered_users (user_id) VALUES (%s) ON CONFLICT (user_id) DO NOTHING",
                (user_id,)
            )
            conn.commit()
            logger.info(f"‚úÖ –Æ–∑–µ—Ä {user_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        if 'conn' in locals():
            conn.close()


def is_user_registered(user_id: str) -> bool:
    try:
        conn = psycopg2.connect(DATABASE_URL)
        with conn.cursor() as cursor:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è user_id={user_id}")
            cursor.execute(
                "SELECT 1 FROM registered_users WHERE user_id = %s",
                (user_id,)
            )
            result = cursor.fetchone() is not None
            logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {result}")
            return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False
    finally:
        if 'conn' in locals():
            conn.close()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
init_db()


# –í–µ–±—Ö—É–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@app.route('/1win_webhook', methods=['GET'])
def handle_webhook():
    try:
        user_id = request.args.get('user_id')
        status = request.args.get('status')
        logger.info(f"üîÑ –í–µ–±—Ö—É–∫ –ø–æ–ª—É—á–µ–Ω: user_id={user_id}, status={status}")

        if status == "success" and user_id:
            save_user_id(user_id)
            logger.info(f"‚úÖ –Æ–∑–µ—Ä {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            return "OK", 200
        else:
            logger.warning(f"üö´ –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –≤–µ–±—Ö—É–∫: {request.url}")
            return "Error", 400
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        return "Server Error", 500


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üîπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_URL)],
        [
            InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="check_reg"),
            InlineKeyboardButton("‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "üé∞ <b>–¢—ã —É–∂–µ –Ω–∞ –ø–æ–ª–ø—É—Ç–∏ –∫ –ø–æ–±–µ–¥–µ...</b>\n\n"
            "1. –ù–∞–∂–º–∏ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª\n"
            "2. –°–æ–∑–¥–∞–π <b>–ù–û–í–´–ô –∞–∫–∫–∞—É–Ω—Ç</b>\n"
            "3. –ù–∞–∂–º–∏ ¬´–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è¬ª",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            "üé∞ <b>–¢—ã —É–∂–µ –Ω–∞ –ø–æ–ª–ø—É—Ç–∏ –∫ –ø–æ–±–µ–¥–µ...</b>\n\n"
            "1. –ù–∞–∂–º–∏ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª\n"
            "2. –°–æ–∑–¥–∞–π <b>–ù–û–í–´–ô –∞–∫–∫–∞—É–Ω—Ç</b>\n"
            "3. –ù–∞–∂–º–∏ ¬´–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è¬ª",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def check_registration(update: Update, context):
    user_id = str(update.effective_user.id)
    try:
        logger.info(f"üïµÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è Telegram user_id={user_id}")
        if is_user_registered(user_id):
            keyboard = [
                [InlineKeyboardButton("üé∞ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä—É–ª–µ—Ç–∫–µ", url=MINI_APP_URL)],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            text = "üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>"
        else:
            keyboard = [
                [InlineKeyboardButton("üîπ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", url=PARTNER_URL)],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            text = "‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>"
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await update.callback_query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


# –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏
async def help_button(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")],
        [InlineKeyboardButton("üìû –ú–µ–Ω–µ–¥–∂–µ—Ä", url=SUPPORT_LINK)]
    ]
    await update.callback_query.edit_message_text(
        "üõ† <b>–¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏</b>\n\n"
        "–î–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )


# –ù–∞–∑–∞–¥ –≤ –Ω–∞—á–∞–ª–æ
async def back_to_start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üîπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_URL)],
        [
            InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="check_reg"),
            InlineKeyboardButton("‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    await update.callback_query.edit_message_text(
        "üé∞ <b>–¢—ã —É–∂–µ –Ω–∞ –ø–æ–ª–ø—É—Ç–∏ –∫ –ø–æ–±–µ–¥–µ...</b>\n\n"
        "1. –ù–∞–∂–º–∏ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª\n"
        "2. –°–æ–∑–¥–∞–π <b>–ù–û–í–´–ô –∞–∫–∫–∞—É–Ω—Ç</b>\n"
        "3. –ù–∞–∂–º–∏ ¬´–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è¬ª",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )


# –ó–∞–ø—É—Å–∫ Flask
def run_flask():
    port = int(os.getenv('PORT', 10000))
    logger.info(f"üîå –ó–∞–ø—É—Å–∫–∞—é Flask –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_bot():
    bot_app = Application.builder().token(BOT_TOKEN).build()
    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(CallbackQueryHandler(check_registration, pattern="^check_reg$"))
    bot_app.add_handler(CallbackQueryHandler(help_button, pattern="^help$"))
    bot_app.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await bot_app.run_polling()


if __name__ == "__main__":
    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()
    try:
        asyncio.run(run_bot())
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
