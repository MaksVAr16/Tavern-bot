import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler
from flask import Flask, request, send_file
from threading import Thread

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
PARTNER_URL = "https://1wilib.life/v3/aggressive-casino?p=vk3f"  # –í–∞—à–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞
SERVER_URL = "https://tavern-bot.onrender.com"  # –í–∞—à URL –Ω–∞ Render

# --- –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ñ–∞–π–ª—ã) ---
REGISTERED_USERS_FILE = "registered_users.txt"
DEPOSITED_USERS_FILE = "deposited_users.txt"

# --- Flask –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –∏ —Ä—É–ª–µ—Ç–∫–∏ ---
app = Flask(__name__)

@app.route('/1win_webhook', methods=['GET'])
def handle_1win_webhook():
    user_id = request.args.get('user_id')
    status = request.args.get('status')
    deposit_amount = request.args.get('deposit_amount')
    
    if status == "success":
        # –ó–∞–ø–∏—Å—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        with open(REGISTERED_USERS_FILE, 'a') as f:
            f.write(f"{user_id}\n")
        logger.info(f"User {user_id} registered!")
        
        # –ó–∞–ø–∏—Å—å –¥–µ–ø–æ–∑–∏—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if deposit_amount and int(deposit_amount) >= 500:
            with open(DEPOSITED_USERS_FILE, 'a') as f:
                f.write(f"{user_id}\n")
            logger.info(f"User {user_id} deposited {deposit_amount} RUB!")
    
    return "OK", 200

@app.route('/roulette')
def roulette():
    return send_file('templates/roulette.html')

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context):
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ–ø–æ–∑–∏—Ç
    deposited = False
    if os.path.exists(DEPOSITED_USERS_FILE):
        with open(DEPOSITED_USERS_FILE, 'r') as f:
            deposited = str(user_id) in f.read()
    
    # –ö–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üîπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_URL)],
        [InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="check_reg")]
    ]
    
    if deposited:
        keyboard.append([InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É", url=f"{SERVER_URL}/roulette")])
    
    await update.message.reply_text(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "1. –ù–∞–∂–º–∏ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª\n"
        "2. –°–æ–∑–¥–∞–π –ù–û–í–´–ô –∞–∫–∫–∞—É–Ω—Ç\n"
        "3. –í–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è¬ª",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
async def check_registration(update: Update, context):
    user_id = update.effective_user.id
    
    try:
        with open(REGISTERED_USERS_FILE, 'r') as f:
            if str(user_id) in f.read():
                await update.callback_query.edit_message_text(
                    "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª!"
                )
            else:
                await update.callback_query.edit_message_text(
                    "‚ùå –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                    "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_URL)]
                    ])
                )
    except FileNotFoundError:
        await update.callback_query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def run_bot():
    bot_app = Application.builder().token(BOT_TOKEN).build()
    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(CallbackQueryHandler(check_registration, pattern="^check_reg$"))
    bot_app.run_polling()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    for file in [REGISTERED_USERS_FILE, DEPOSITED_USERS_FILE]:
        if not os.path.exists(file):
            open(file, 'w').close()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    Thread(target=run_bot).start()
    app.run(host="0.0.0.0", port=10000)
