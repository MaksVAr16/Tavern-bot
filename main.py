import os
import logging
import threading
import requests
import time
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, CallbackContext
from dotenv import load_dotenv
from telegram.error import TelegramError, BadRequest

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ================== #
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Self-ping –¥–ª—è Render
def self_ping():
    while True:
        try:
            requests.get("https://tavern-bot.onrender.com")
            logger.info("‚úÖ Self-ping –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ self-ping: {e}")
        time.sleep(240)

app = Flask(__name__)
@app.route('/')
def wake_up():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ================== #
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPPORT_LINK = "https://t.me/Maksimmm16"
PARTNER_LINK = "https://1wilib.life/?open=register&p=2z3v"
VIP_BOT_LINK = "https://t.me/TESTVIPP_BOT"
CHANNEL_LINK = "https://t.me/jacktaverna"
REG_CHANNEL = -1002739343436  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
DEPOSIT_CHANNEL = -1002690483167  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤

IMAGES = {
    "start": "https://i.imgur.com/X8aN0Lk.jpg",
    "help": "https://i.imgur.com/X8aN0Lk.jpg",
    "level_1": "https://i.imgur.com/X8aN0Lk.jpg",
    "level_2": "https://i.imgur.com/X8aN0Lk.jpg",
    "level_3": "https://i.imgur.com/X8aN0Lk.jpg",
    "level_4": "https://i.imgur.com/X8aN0Lk.jpg",
    "level_5": "https://i.imgur.com/X8aN0Lk.jpg",
    "vip": "https://i.imgur.com/X8aN0Lk.jpg"
}

TEXTS = {
    "start": "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –ö–∞–∑–∏–Ω–æ!\n\nüî• –ü–µ—Ä–≤—ã–µ 50 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–ª—É—á–∞—é—Ç +1 –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ!\n\nüîπ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä—É–ª–µ—Ç–∫–µ:\n1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n3. –ü–æ–ª—É—á–∏—Ç–µ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏—è",
    "help": "üõ† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç (—Å—Ç–∞—Ä—ã–µ –Ω–µ –ø–æ–¥–æ–π–¥—É—Ç)\n2. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç\n3. –î–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É",
    "reg_failed": "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã:\n1. –°–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç\n2. –ü–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –∫–Ω–æ–ø–∫–∏ ¬´üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª\n3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞, –∞ –Ω–µ —Å—Ç–∞—Ä–æ–≥–æ",
    "deposit_failed": "‚ö†Ô∏è –î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {level} —Ç—Ä–µ–±—É–µ—Ç—Å—è:\n1. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç {deposit}‚ÇΩ\n2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏\n3. –°–æ–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ —Å —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞",
    "vip": "üíé –°–ï–ù–°–ê–¶–ò–Ø! –í–´ –í–´–ò–ì–†–ê–õ–ò VIP-–î–û–°–¢–£–ü!\n\nüî• –í—ã –≤–æ—à–ª–∏ –≤ —Ç–æ–ø-0.1% –∏–≥—Ä–æ–∫–æ–≤!\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:\n‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã\n‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏",
    "reg_success": "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –ö–∞–∑–∏–Ω–æ!\n\nüéâ –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –£—Ä–æ–≤–Ω–µ 1!",
    "deposit_success": "‚úÖ –î–µ–ø–æ–∑–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –£—Ä–æ–≤–µ–Ω—å {level}!\n\nüî• –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {attempts} –≤—Ä–∞—â–µ–Ω–∏–π!"
}

def get_start_keyboard():
    return [
        [InlineKeyboardButton("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_LINK)],
        [InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="check_reg")],
        [InlineKeyboardButton("‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="help")]
    ]

def get_help_keyboard():
    return [
        [InlineKeyboardButton("üìû –ú–µ–Ω–µ–¥–∂–µ—Ä", url=SUPPORT_LINK)],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]

def get_reg_failed_keyboard():
    return [
        [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", url=PARTNER_LINK)],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]

def get_level_keyboard(level):
    web_app_url = "https://your-webapp.com/roulette"
    return [
        [InlineKeyboardButton(f"üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É ({LEVELS[level]['attempts']} –ø–æ–ø—ã—Ç–æ–∫)", web_app=WebAppInfo(url=f"{web_app_url}?level={level}"))],
        [InlineKeyboardButton("üíé VIP-–¥–æ—Å—Ç—É–ø", url=PARTNER_LINK)],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", url=SUPPORT_LINK)]
    ]

def get_deposit_failed_keyboard(level):
    return [
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url=PARTNER_LINK)],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_dep_{level}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_level_{level-1}" if level > 1 else "back_to_start")]
    ]

def get_vip_keyboard():
    return [
        [InlineKeyboardButton("üíé –ü–æ–ª—É—á–∏—Ç—å VIP", url=PARTNER_LINK)],
        [InlineKeyboardButton("üéÅ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑", url=VIP_BOT_LINK)],
        [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", url=SUPPORT_LINK)]
    ]

LEVELS = {
    1: {"attempts": 3, "deposit": 0, "text": "üéâ –£—Ä–æ–≤–µ–Ω—å 1: 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏—è!\n\n–í—ã–∏–≥—Ä—ã—à–∏ –¥–æ 5000‚ÇΩ!"},
    2: {"attempts": 5, "deposit": 500, "text": "üí∞ –£—Ä–æ–≤–µ–Ω—å 2: 5 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 500‚ÇΩ)"},
    3: {"attempts": 10, "deposit": 2000, "text": "üöÄ –£—Ä–æ–≤–µ–Ω—å 3: 10 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 2000‚ÇΩ)"},
    4: {"attempts": 15, "deposit": 5000, "text": "ü§ë –£—Ä–æ–≤–µ–Ω—å 4: 15 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 5000‚ÇΩ)"},
    5: {"attempts": 25, "deposit": 15000, "text": "üèÜ –£—Ä–æ–≤–µ–Ω—å 5: 25 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 15000‚ÇΩ)"}
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup(get_start_keyboard())
    if update.message:
        await update.message.reply_photo(
            photo=IMAGES["start"],
            caption=TEXTS["start"],
            reply_markup=keyboard
        )
    else:
        query = update.callback_query
        await query.answer()
        await safe_edit_message(query, IMAGES["start"], TEXTS["start"], keyboard)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await safe_edit_message(
        query, 
        IMAGES["help"], 
        TEXTS["help"], 
        InlineKeyboardMarkup(get_help_keyboard())
    )

async def safe_edit_message(query, image, caption, reply_markup):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_media(
            media=InputMediaPhoto(image, caption=caption),
            reply_markup=reply_markup
        )
    except BadRequest as e:
        if "message is not modified" in str(e):
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        elif "There is no text in the message" in str(e):
            # –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(
                text=caption,
                reply_markup=reply_markup
            )
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
            await query.message.reply_text(
                text=caption,
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        await query.message.reply_text(
            text=caption,
            reply_markup=reply_markup
        )

async def check_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    registered = False
    
    try:
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è user_id: {user_id} –≤ –∫–∞–Ω–∞–ª–µ {REG_CHANNEL}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
        messages = await context.bot.get_chat_history(chat_id=REG_CHANNEL, limit=200)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        async for message in messages:
            if message.text and str(user_id) in message.text:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è {user_id} –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {message.message_id}")
                registered = True
                break
                
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}"
        logger.error(error_msg)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—à–∏–±–∫–∏
        error_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await safe_edit_message(
            query,
            IMAGES["start"],
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            error_keyboard
        )
        return
    
    if registered:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await safe_edit_message(
            query,
            IMAGES["level_1"],
            TEXTS["reg_success"],
            InlineKeyboardMarkup(get_level_keyboard(1))
        )
    else:
        logger.warning(f"‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è user_id: {user_id}")
        await safe_edit_message(
            query,
            IMAGES["start"],
            TEXTS["reg_failed"],
            InlineKeyboardMarkup(get_reg_failed_keyboard())
        )

async def show_level(query, level):
    await safe_edit_message(
        query,
        IMAGES[f"level_{level}"],
        LEVELS[level]["text"],
        InlineKeyboardMarkup(get_level_keyboard(level))
    )

async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def check_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    level = int(query.data.split('_')[-1])
    
    user_id = query.from_user.id
    deposit_found = False
    
    try:
        required_amount = LEVELS[level]["deposit"]
        messages = await context.bot.get_chat_history(chat_id=DEPOSIT_CHANNEL, limit=200)
        
        async for message in messages:
            if message.text:
                conditions = [
                    str(user_id) in message.text,
                    f"{required_amount}‚ÇΩ" in message.text
                ]
                
                if all(conditions):
                    deposit_found = True
                    break
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞: {e}")
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—à–∏–±–∫–∏
        error_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_level_{level-1}")]
        ])
        
        await safe_edit_message(
            query,
            IMAGES[f"level_{level}"],
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            error_keyboard
        )
        return
    
    if deposit_found:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–µ–ø–æ–∑–∏—Ç–µ
        success_text = TEXTS["deposit_success"].format(
            level=level,
            attempts=LEVELS[level]["attempts"]
        )
        
        await safe_edit_message(
            query,
            IMAGES[f"level_{level}"],
            success_text,
            InlineKeyboardMarkup(get_level_keyboard(level))
        )
    else:
        error_text = TEXTS["deposit_failed"].format(
            level=level,
            deposit=LEVELS[level]["deposit"]
        )
        
        await safe_edit_message(
            query,
            IMAGES[f"level_{level}"],
            error_text,
            InlineKeyboardMarkup(get_deposit_failed_keyboard(level))
        )

def run_bot():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    handlers = [
        CommandHandler("start", start),
        CallbackQueryHandler(help_command, pattern="^help$"),
        CallbackQueryHandler(check_registration, pattern="^check_reg$"),
        CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
    for level in range(1, 6):
        handlers.append(
            CallbackQueryHandler(
                lambda update, context, lvl=level: show_level(update.callback_query, lvl),
                pattern=f"^back_to_level_{level}$"
            )
        )
        handlers.append(
            CallbackQueryHandler(
                check_deposit,
                pattern=f"^check_dep_{level}$"
            )
        )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    for handler in handlers:
        application.add_handler(handler)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True,
        close_loop=False
    )

async def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {context.error}", exc_info=context.error)
    
    if update and update.callback_query:
        try:
            await update.callback_query.answer()
            await update.callback_query.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        except:
            pass

if __name__ == "__main__":
    if not os.environ.get("BOT_STARTED"):
        os.environ["BOT_STARTED"] = "1"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º self-ping –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self_ping, daemon=True).start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(
            target=app.run, 
            kwargs={'host': '0.0.0.0', 'port': 8080, 'debug': False, 'use_reloader': False},
            daemon=True
        ).start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        run_bot()
