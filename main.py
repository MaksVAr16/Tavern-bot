import os
import logging
import threading
import requests
import time
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== SELF-PING =====
def self_ping():
    while True:
        try:
            requests.get("https://–≤–∞—à-–ø—Ä–æ–µ–∫—Ç.onrender.com")  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL!
            logger.info("‚úÖ Self-ping –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ self-ping: {e}")
        time.sleep(240)

app = Flask(__name__)
@app.route('/')
def wake_up():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

# ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPPORT_LINK = "https://t.me/Maksimmm16"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
PARTNER_LINK = "https://1wilib.life/?open=register&p=2z3v"  # –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞
REG_CHANNEL = "@+4T5JdFC8bzBkZmIy"  # –ö–∞–Ω–∞–ª —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def get_start_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (NEW: —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–º–æ—â—å)"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_LINK)],
        [InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="check_reg")],
        [InlineKeyboardButton("‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="help")]
    ])

def get_help_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–ü–æ–º–æ—â—å' (NEW: –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –Ω–∞–∑–∞–¥)"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=SUPPORT_LINK)],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])

def get_reg_failed_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (NEW: –ø–æ–º–æ—â—å –∏ –Ω–∞–∑–∞–¥)"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (NEW: –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)"""
    await update.message.reply_text(
        "üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É:\n"
        "1. –ù–∞–∂–º–∏ ¬´üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª –∏ —Å–æ–∑–¥–∞–π <b>–Ω–æ–≤—ã–π</b> –∞–∫–∫–∞—É–Ω—Ç\n"
        "2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–Ω–æ–ø–∫–æ–π ¬´‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è¬ª\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã ‚Äî –Ω–∞–∂–º–∏ ¬´‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å¬ª",
        reply_markup=get_start_keyboard(),
        parse_mode="HTML"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ (NEW: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –∫–Ω–æ–ø–∫–∏)"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üõ† <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n"
        "1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç</b> (—Å—Ç–∞—Ä—ã–µ –Ω–µ –ø–æ–¥–æ–π–¥—É—Ç)\n"
        "3. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç\n\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–ª–∞—Å—å ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:",
        reply_markup=get_help_keyboard(),
        parse_mode="HTML"
    )

async def check_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª–µ (NEW: –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ)"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    registered = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ
    async for msg in context.bot.get_chat_history(REG_CHANNEL, limit=100):
        if str(user_id) in msg.text:
            registered = True
            break
    
    if registered:
        await query.edit_message_text(
            "üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
            parse_mode="HTML"
        )
    else:
        await query.edit_message_text(
            "‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã:\n"
            "1. –°–æ–∑–¥–∞–ª–∏ <b>–Ω–æ–≤—ã–π</b> –∞–∫–∫–∞—É–Ω—Ç\n"
            "2. –ü–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –∫–Ω–æ–ø–∫–∏ ¬´üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª\n\n"
            "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å¬ª",
            reply_markup=get_reg_failed_keyboard(),
            parse_mode="HTML"
        )

async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é (NEW: –¥–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É:\n"
        "1. –ù–∞–∂–º–∏ ¬´üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª\n"
        "2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–Ω–æ–ø–∫–æ–π ¬´‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è¬ª",
        reply_markup=get_start_keyboard(),
        parse_mode="HTML"
    )

# ===== –ó–ê–ü–£–°–ö =====
def run_bot():
    app_bot = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (NEW: –¥–æ–±–∞–≤–ª–µ–Ω—ã help –∏ back_to_start)
    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CallbackQueryHandler(check_registration, pattern="^check_reg$"))
    app_bot.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    app_bot.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    app_bot.run_polling(
        allowed_updates=Update.ALL_TYPES,
        close_loop=False,
        stop_signals=[]
    )

if __name__ == "__main__":
    if not os.environ.get("BOT_STARTED"):
        os.environ["BOT_STARTED"] = "1"
        threading.Thread(target=self_ping, daemon=True).start()
        threading.Thread(target=app.run, kwargs={'host':'0.0.0.0','port':8080}, daemon=True).start()
        run_bot()
