import os
import logging
import threading
import requests
import time
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ================== #
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Self-ping –¥–ª—è Render
def self_ping():
    while True:
        try:
            requests.get("https://tavern-bot.onrender.com")
            logger.info("‚úÖ Self-ping –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ self-ping: {e}")
        time.sleep(240)

app = Flask(__name__)
@app.route('/')
def wake_up():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ================== #
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPPORT_LINK = "https://t.me/Maksimmm16"
PARTNER_LINK = "https://1wilib.life/?open=register&p=2z3v"
VIP_BOT_LINK = "https://t.me/TESTVIPP_BOT"
CHANNEL_LINK = "https://t.me/jacktaverna"
REG_CHANNEL = "-1002739343436"  # –í–∞–∂–Ω–æ: —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
DEPOSIT_CHANNEL = "-1002690483167"

# –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ä–∞–±–æ—á–∏–µ —Å—Å—ã–ª–∫–∏)
IMAGES = {
    "start": "https://i.imgur.com/X8aN0Lk.jpg",
    "help": "https://i.imgur.com/X8aN0Lk.jpg", 
    "level_1": "https://i.imgur.com/X8aN0Lk.jpg",
    "level_2": "https://i.imgur.com/X8aN0Lk.jpg",
    "level_3": "https://i.imgur.com/X8aN0Lk.jpg",
    "level_4": "https://i.imgur.com/X8aN0Lk.jpg",
    "level_5": "https://i.imgur.com/X8aN0Lk.jpg",
    "vip": "https://i.imgur.com/X8aN0Lk.jpg"
}

# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)
TEXTS = {
    "start": (
        "üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –ö–∞–∑–∏–Ω–æ!</b>\n\n"
        "üî• <i>–ü–µ—Ä–≤—ã–µ 50 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–ª—É—á–∞—é—Ç +1 –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ!</i>\n\n"
        "üîπ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä—É–ª–µ—Ç–∫–µ:\n"
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
        "2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏—è"
    ),
    "help": (
        "üõ† <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç</b> (—Å—Ç–∞—Ä—ã–µ –Ω–µ –ø–æ–¥–æ–π–¥—É—Ç)\n"
        "2. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç\n"
        "3. –î–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É"
    ),
    "reg_failed": (
        "‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>\n\n"
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã:\n"
        "1. –°–æ–∑–¥–∞–ª–∏ <b>–Ω–æ–≤—ã–π</b> –∞–∫–∫–∞—É–Ω—Ç\n"
        "2. –ü–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –∫–Ω–æ–ø–∫–∏ ¬´üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª"
    ),
    "deposit_failed": (
        "‚ö†Ô∏è <b>–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
        "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {level} —Ç—Ä–µ–±—É–µ—Ç—Å—è:\n"
        "1. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç {deposit}‚ÇΩ\n"
        "2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏"
    ),
    "vip": (
        "üíé <b>–°–ï–ù–°–ê–¶–ò–Ø! –í–´ –í–´–ò–ì–†–ê–õ–ò VIP-–î–û–°–¢–£–ü!</b>\n\n"
        "üî• <i>–í—ã –≤–æ—à–ª–∏ –≤ —Ç–æ–ø-0.1% –∏–≥—Ä–æ–∫–æ–≤!</i>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:\n"
        "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
        "‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã\n"
        "‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏"
    )
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)
def get_start_keyboard():
    return [
        [InlineKeyboardButton("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_LINK)],
        [InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="check_reg")],
        [InlineKeyboardButton("‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="help")]
    ]

def get_help_keyboard():
    return [
        [InlineKeyboardButton("üìû –ú–µ–Ω–µ–¥–∂–µ—Ä", url=SUPPORT_LINK)],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]

def get_reg_failed_keyboard():
    return [
        [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", url=PARTNER_LINK)],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]

def get_level_keyboard(level):
    web_app_url = "https://your-webapp.com/roulette"
    return [
        [InlineKeyboardButton(
            f"üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É ({LEVELS[level]['attempts']} –ø–æ–ø—ã—Ç–æ–∫)",
            web_app=WebAppInfo(url=f"{web_app_url}?level={level}")
        )],
        [InlineKeyboardButton("üíé VIP-–¥–æ—Å—Ç—É–ø", url=PARTNER_LINK)],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", url=SUPPORT_LINK)]
    ]

def get_deposit_failed_keyboard(level):
    return [
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url=PARTNER_LINK)],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_dep_{level}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_level_{level-1}" if level > 1 else "back_to_start")]
    ]

def get_vip_keyboard():
    return [
        [InlineKeyboardButton("üíé –ü–æ–ª—É—á–∏—Ç—å VIP", url=PARTNER_LINK)],
        [InlineKeyboardButton("üéÅ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑", url=VIP_BOT_LINK)],
        [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", url=SUPPORT_LINK)]
    ]

# –£—Ä–æ–≤–Ω–∏ (–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)
LEVELS = {
    1: {"attempts": 3, "deposit": 0, "text": "üéâ <b>–£—Ä–æ–≤–µ–Ω—å 1: 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏—è!</b>\n\n–í—ã–∏–≥—Ä—ã—à–∏ –¥–æ <b>5000‚ÇΩ</b>!"},
    2: {"attempts": 5, "deposit": 500, "text": "üí∞ <b>–£—Ä–æ–≤–µ–Ω—å 2: 5 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 500‚ÇΩ)</b>"},
    3: {"attempts": 10, "deposit": 2000, "text": "üöÄ <b>–£—Ä–æ–≤–µ–Ω—å 3: 10 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 2000‚ÇΩ)</b>"},
    4: {"attempts": 15, "deposit": 5000, "text": "ü§ë <b>–£—Ä–æ–≤–µ–Ω—å 4: 15 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 5000‚ÇΩ)</b>"},
    5: {"attempts": 25, "deposit": 15000, "text": "üèÜ <b>–£—Ä–æ–≤–µ–Ω—å 5: 25 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 15000‚ÇΩ)</b>"}
}

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ================== #
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup(get_start_keyboard())
    if update.message:
        await update.message.reply_photo(
            photo=IMAGES["start"],
            caption=TEXTS["start"],
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_media(
            media=InputMediaPhoto(IMAGES["start"], caption=TEXTS["start"]),
            reply_markup=keyboard
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_media(
        media=InputMediaPhoto(IMAGES["help"], caption=TEXTS["help"]),
        reply_markup=InlineKeyboardMarkup(get_help_keyboard())
    )

async def check_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è - –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    await show_level(query, 1)

async def show_level(query, level):
    await query.edit_message_media(
        media=InputMediaPhoto(IMAGES[f"level_{level}"], caption=LEVELS[level]["text"]),
        reply_markup=InlineKeyboardMarkup(get_level_keyboard(level))
    )

async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

# ================== –ó–ê–ü–£–°–ö ================== #
def run_bot():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    application.add_handler(CallbackQueryHandler(check_registration, pattern="^check_reg$"))
    application.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))
    
    # –î–ª—è —É—Ä–æ–≤–Ω–µ–π 2-5 (–∑–∞–≥–ª—É—à–∫–∏)
    for level in range(1, 6):
        application.add_handler(CallbackQueryHandler(
            lambda update, context, lvl=level: show_level(update.callback_query, lvl),
            pattern=f"^back_to_level_{level}$"
        ))
        application.add_handler(CallbackQueryHandler(
            lambda update, context, lvl=level: check_deposit(update, context, lvl),
            pattern=f"^check_dep_{level}$"
        ))
    
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        close_loop=False,
        drop_pending_updates=True
    )

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
async def check_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE, level: int):
    query = update.callback_query
    await query.answer()
    await show_level(query, level)

if __name__ == "__main__":
    if not os.environ.get("BOT_STARTED"):
        os.environ["BOT_STARTED"] = "1"
        threading.Thread(target=self_ping, daemon=True).start()
        threading.Thread(target=app.run, kwargs={'host':'0.0.0.0','port':8080}, daemon=True).start()
        run_bot()
