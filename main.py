import os
import logging
import threading
import requests
import time
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ================== #
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def self_ping():
    while True:
        try:
            requests.get("https://tavern-bot.onrender.com")
            logger.info("‚úÖ Self-ping –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ self-ping: {e}")
        time.sleep(240)

app = Flask(__name__)
@app.route('/')
def wake_up():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ================== #
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPPORT_LINK = "https://t.me/Maksimmm16"
PARTNER_LINK = "https://1wilib.life/?open=register&p=2z3v"
VIP_BOT_LINK = "https://t.me/TESTVIPP_BOT"
CHANNEL_LINK = "https://t.me/your_channel"
REG_CHANNEL = "@+-1002739343436"
DEPOSIT_CHANNEL = "@+-1002690483167"

IMAGES = {
    "start": "https://i.imgur.com/placeholder.jpg",
    "help": "https://i.imgur.com/placeholder.jpg",
    "level_1": "https://i.imgur.com/placeholder.jpg",
    "level_2": "https://i.imgur.com/placeholder.jpg",
    "level_3": "https://i.imgur.com/placeholder.jpg", 
    "level_4": "https://i.imgur.com/placeholder.jpg",
    "level_5": "https://i.imgur.com/placeholder.jpg",
    "vip": "https://i.imgur.com/placeholder.jpg"
}

LEVELS = {
    1: {"attempts": 3, "deposit": 0, "text": "üéâ <b>–£—Ä–æ–≤–µ–Ω—å 1: 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏—è!</b>\n\n–í—ã–∏–≥—Ä—ã—à–∏ –¥–æ <b>5000‚ÇΩ</b>!"},
    2: {"attempts": 5, "deposit": 500, "text": "üí∞ <b>–£—Ä–æ–≤–µ–Ω—å 2: 5 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 500‚ÇΩ)</b>"},
    3: {"attempts": 10, "deposit": 2000, "text": "üöÄ <b>–£—Ä–æ–≤–µ–Ω—å 3: 10 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 2000‚ÇΩ)</b>"},
    4: {"attempts": 15, "deposit": 5000, "text": "ü§ë <b>–£—Ä–æ–≤–µ–Ω—å 4: 15 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 5000‚ÇΩ)</b>"},
    5: {"attempts": 25, "deposit": 15000, "text": "üèÜ <b>–£—Ä–æ–≤–µ–Ω—å 5: 25 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 15000‚ÇΩ)</b>"}
}

def get_start_keyboard():
    return [
        [InlineKeyboardButton("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_LINK)],
        [InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="check_reg")],
        [InlineKeyboardButton("‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="help")]
    ]

def get_help_keyboard():
    return [
        [InlineKeyboardButton("üìû –ú–µ–Ω–µ–¥–∂–µ—Ä", url=SUPPORT_LINK)],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]

def get_reg_failed_keyboard():
    return [
        [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", url=PARTNER_LINK)],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]

def get_level_keyboard(level):
    web_app_url = "https://t.me/Tavern_Rulet_bot/myapp"
    return [
        [InlineKeyboardButton(
            f"üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É ({LEVELS[level]['attempts']} –ø–æ–ø—ã—Ç–æ–∫)",
            web_app=WebAppInfo(url=f"{web_app_url}?level={level}")
        )],
        [InlineKeyboardButton("üíé VIP-–¥–æ—Å—Ç—É–ø", url=PARTNER_LINK)],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", url=SUPPORT_LINK)]
    ]

def get_deposit_failed_keyboard(level):
    return [
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url=PARTNER_LINK)],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_dep_{level}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_level_{level-1}" if level > 1 else "back_to_start")]
    ]

def get_vip_keyboard():
    return [
        [InlineKeyboardButton("üíé –ü–æ–ª—É—á–∏—Ç—å VIP", url=PARTNER_LINK)],
        [InlineKeyboardButton("üéÅ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑", url=VIP_BOT_LINK)],
        [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", url=SUPPORT_LINK)]
    ]

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ================== #
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_photo(
            photo=IMAGES["start"],
            caption="üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –ö–∞–∑–∏–Ω–æ!</b>\n\nüî• <i>–ü–µ—Ä–≤—ã–µ 50 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–ª—É—á–∞—é—Ç +1 –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ!</i>",
            reply_markup=InlineKeyboardMarkup(get_start_keyboard()),
            parse_mode="HTML"
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        await query.edit_message_media(
            media=InputMediaPhoto(IMAGES["help"], 
            caption="üõ† <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç\n2. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç",
            parse_mode="HTML"
        )
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup(get_help_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await query.message.reply_photo(
            photo=IMAGES["help"],
            caption="üõ† <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç...",
            reply_markup=InlineKeyboardMarkup(get_help_keyboard()),
            parse_mode="HTML"
        )

async def check_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    registered = False
    
    try:
        async for msg in context.bot.get_chat_history(REG_CHANNEL, limit=100):
            if str(user_id) in msg.text:
                registered = True
                break
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        await query.edit_message_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
        )
        return
    
    if registered:
        try:
            await query.edit_message_media(
                media=InputMediaPhoto(IMAGES["level_1"],
                caption=LEVELS[1]["text"],
                parse_mode="HTML"
            )
            await query.edit_message_reply_markup(
                reply_markup=InlineKeyboardMarkup(get_level_keyboard(1))
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å 1: {e}")
            await query.message.reply_photo(
                photo=IMAGES["level_1"],
                caption=LEVELS[1]["text"],
                reply_markup=InlineKeyboardMarkup(get_level_keyboard(1)),
                parse_mode="HTML"
            )
    else:
        await query.edit_message_text(
            "‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã:\n1. –°–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç\n2. –ü–µ—Ä–µ—à–ª–∏ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ",
            reply_markup=InlineKeyboardMarkup(get_reg_failed_keyboard()),
            parse_mode="HTML"
        )

async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start(query.message, context)

# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ================== #
def run_bot():
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    app.add_handler(CallbackQueryHandler(check_registration, pattern="^check_reg$"))
    app.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))
    
    app.run_polling(
        allowed_updates=Update.ALL_TYPES,
        close_loop=False,
        stop_signals=[]
    )

if __name__ == "__main__":
    if not os.environ.get("BOT_STARTED"):
        os.environ["BOT_STARTED"] = "1"
        threading.Thread(target=self_ping, daemon=True).start()
        threading.Thread(target=app.run, kwargs={'host':'0.0.0.0','port':8080}, daemon=True).start()
        run_bot()
