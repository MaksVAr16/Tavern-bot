import os
import logging
import asyncio
from threading import Thread, Lock
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler
from flask import Flask, request, jsonify

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot_debug.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
PARTNER_URL = "https://1wilib.life/?open=register&p=2z3v"
SUPPORT_LINK = "https://t.me/Maksimmm16"
SERVER_URL = "https://tavern-bot.onrender.com"

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
REGISTERED_USERS_FILE = os.path.abspath("registered_users.txt")
file_lock = Lock()

# --- –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
app = Flask(__name__)

@app.route('/1win_webhook', methods=['GET', 'POST'])
def handle_1win_webhook():
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {request.method} {request.url}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        user_id = request.args.get('user_id') or (request.json and request.json.get('user_id'))
        status = request.args.get('status') or (request.json and request.json.get('status'))
        
        if not user_id:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id")
            return jsonify({"status": "error", "message": "user_id required"}), 400
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: user_id={user_id}, status={status}")

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(REGISTERED_USERS_FILE):
            with open(REGISTERED_USERS_FILE, 'w') as f:
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {REGISTERED_USERS_FILE}")
        
        if status == "success":
            with file_lock:
                with open(REGISTERED_USERS_FILE, 'a+') as f:
                    f.seek(0)
                    if str(user_id) not in f.read():
                        f.write(f"{user_id}\n")
                        logger.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_id}")
        
        return jsonify({"status": "ok"}), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {str(e)}", exc_info=True)
        return jsonify({"status": "error", "message": str(e)}), 500

# --- –í—Å–µ –≤–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üîπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_URL)],
        [
            InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="check_reg"),
            InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!\n\n"
            "1. –ù–∞–∂–º–∏ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª\n"
            "2. –°–æ–∑–¥–∞–π <b>–ù–û–í–´–ô –∞–∫–∫–∞—É–Ω—Ç</b> (–≤—Ö–æ–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–µ –ø–æ–¥–æ–π–¥—ë—Ç!)\n"
            "3. –í–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è¬ª\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –Ω–∞–∂–º–∏ ¬´–ü–æ–º–æ—â—å¬ª",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!\n\n"
            "1. –ù–∞–∂–º–∏ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª\n"
            "2. –°–æ–∑–¥–∞–π <b>–ù–û–í–´–ô –∞–∫–∫–∞—É–Ω—Ç</b> (–≤—Ö–æ–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–µ –ø–æ–¥–æ–π–¥—ë—Ç!)\n"
            "3. –í–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è¬ª\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –Ω–∞–∂–º–∏ ¬´–ü–æ–º–æ—â—å¬ª",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# --- –ó–∞–ø—É—Å–∫ Flask ---
def run_flask():
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 10000)))

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def run_bot():
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(REGISTERED_USERS_FILE):
        with open(REGISTERED_USERS_FILE, 'w') as f:
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {REGISTERED_USERS_FILE}")
    
    bot_app = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(CallbackQueryHandler(check_registration, pattern="^check_reg$"))
    bot_app.add_handler(CallbackQueryHandler(help_button, pattern="^help$"))
    bot_app.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))
    
    await bot_app.initialize()
    await bot_app.start()
    await bot_app.updater.start_polling(drop_pending_updates=True)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    return bot_app

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        bot = loop.run_until_complete(run_bot())
        loop.run_forever()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
    finally:
        loop.close()
