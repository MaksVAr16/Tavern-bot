import os
import logging
import asyncio
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from flask import Flask, request
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot_debug.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥
BOT_TOKEN = os.getenv("BOT_TOKEN")
PARTNER_URL = "https://1wilib.life/?open=register&p=2z3v"
SUPPORT_LINK = "https://t.me/Maksimmm16"
REGISTERED_USERS_FILE = os.path.abspath("registered_users.txt")
ADMIN_ID = "8037553363"  # –¢–≤–æ–π ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(REGISTERED_USERS_FILE):
    with open(REGISTERED_USERS_FILE, 'w') as f:
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {REGISTERED_USERS_FILE}")

app = Flask(__name__)

@app.route('/1win_webhook', methods=['GET'])
def handle_webhook():
    try:
        user_id = request.args.get('user_id')
        status = request.args.get('status')
        deposit = request.args.get('deposit', '0')
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫: user_id={user_id}, status={status}, deposit={deposit}")
        
        if status == "success" and user_id and int(deposit) >= 100:
            with open(REGISTERED_USERS_FILE, 'a') as f:
                f.write(f"{user_id}\n")
            logger.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_id}")
            return "OK", 200
            
        return "Error: Need deposit 100+ RUB", 400
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        return "Server Error", 500

async def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üîπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_URL)],
        [
            InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="check_reg"),
            InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    text = (
        "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±—É–∫–º–µ–∫–µ—Ä-–±–æ—Ç–∞!</b>\n\n"
        "üí∞ <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞:</b>\n"
        "1. –ù–∞–∂–º–∏ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª\n"
        "2. –°–æ–∑–¥–∞–π <b>–ù–û–í–´–ô –∞–∫–∫–∞—É–Ω—Ç</b>\n"
        "3. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å <b>–æ—Ç 100‚ÇΩ</b>\n"
        "4. –ù–∞–∂–º–∏ ¬´–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è¬ª\n\n"
        "‚ö†Ô∏è <i>–ë–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞ –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è!</i>"
    )
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")

async def check_registration(update: Update, context):
    user_id = str(update.effective_user.id)
    
    try:
        with open(REGISTERED_USERS_FILE, 'r') as f:
            registered = user_id in f.read()
            
        if registered:
            await update.callback_query.edit_message_text(
                "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –¥–µ–ø–æ–∑–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!</b>\n\n"
                "–í–∞—à –±–æ–Ω—É—Å –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
                parse_mode="HTML"
            )
        else:
            keyboard = [
                [InlineKeyboardButton("üîπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_URL)],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            await update.callback_query.edit_message_text(
                "‚ùå <b>–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–µ–ø–æ–∑–∏—Ç –º–µ–Ω–µ–µ 100‚ÇΩ</b>\n\n"
                "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ\n"
                "2. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –æ—Ç 100‚ÇΩ\n"
                "3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
        await update.callback_query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def manual_check(update: Update, context):
    user_id = str(update.effective_user.id)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π ID
        with open(REGISTERED_USERS_FILE, 'r+') as f:
            existing_ids = f.read()
            if user_id in existing_ids:
                await update.message.reply_text("‚ö†Ô∏è –í–∞—à ID —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ!")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º ID
            f.write(f"{user_id}\n")
        
        await update.message.reply_text(
            "‚úÖ <b>–í–∞—à ID —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é!</b>\n\n"
            "–ï—Å–ª–∏ –±–æ–Ω—É—Å –Ω–µ –ø—Ä–∏—à–µ–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤:\n"
            "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞\n"
            "2. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É 1Win\n"
            "3. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: @Maksimmm16",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        if str(update.effective_user.id) != ADMIN_ID:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚ö†Ô∏è –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {user_id}"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def help_button(update: Update, context):
    await update.callback_query.answer()
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")],
        [InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", url=SUPPORT_LINK)]
    ]
    await update.callback_query.edit_message_text(
        "üõ† <b>–¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º—ã:\n"
        "1. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ <b>–Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç</b>\n"
        "2. –ü–æ–ø–æ–ª–Ω—è–π—Ç–µ –±–∞–ª–∞–Ω—Å <b>–æ—Ç 100‚ÇΩ</b>\n"
        "3. –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
        "<i>–ë–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞ –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è!</i>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def back_to_start(update: Update, context):
    await start(update, context)

def run_flask():
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 10000)))

async def run_bot():
    bot_app = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(CallbackQueryHandler(check_registration, pattern="^check_reg$"))
    bot_app.add_handler(CallbackQueryHandler(help_button, pattern="^help$"))
    bot_app.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))
    bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, manual_check))
    
    await bot_app.initialize()
    await bot_app.start()
    await bot_app.updater.start_polling(drop_pending_updates=True)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    return bot_app

if __name__ == "__main__":
    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        bot = loop.run_until_complete(run_bot())
        loop.run_forever()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
    finally:
        loop.close()
