import os
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler
from flask import Flask, request

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
PARTNER_URL = "https://1wilib.life/v3/aggressive-casino?p=vk3f"
SUPPORT_LINK = "https://t.me/Maksimmm16"
SERVER_URL = "https://tavern-bot.onrender.com"

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
REGISTERED_USERS_FILE = "registered_users.txt"

# --- Flask –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ ---
app = Flask(__name__)

@app.route('/1win_webhook', methods=['GET'])
def handle_1win_webhook():
    user_id = request.args.get('user_id')
    status = request.args.get('status')
    
    if status == "success":
        with open(REGISTERED_USERS_FILE, 'a') as f:
            f.write(f"{user_id}\n")
        logger.info(f"User {user_id} registered!")
    
    return "OK", 200

# --- –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üîπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_URL)],
        [
            InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="check_reg"),
            InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    
    # –ï—Å–ª–∏ —ç—Ç–æ callback (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥")
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!\n\n"
            "1. –ù–∞–∂–º–∏ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª\n"
            "2. –°–æ–∑–¥–∞–π <b>–ù–û–í–´–ô –∞–∫–∫–∞—É–Ω—Ç</b> (–≤—Ö–æ–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–µ –ø–æ–¥–æ–π–¥—ë—Ç!)\n"
            "3. –í–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è¬ª\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –Ω–∞–∂–º–∏ ¬´–ü–æ–º–æ—â—å¬ª",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start
        await update.message.reply_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!\n\n"
            "1. –ù–∞–∂–º–∏ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª\n"
            "2. –°–æ–∑–¥–∞–π <b>–ù–û–í–´–ô –∞–∫–∫–∞—É–Ω—Ç</b> (–≤—Ö–æ–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–µ –ø–æ–¥–æ–π–¥—ë—Ç!)\n"
            "3. –í–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è¬ª\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –Ω–∞–∂–º–∏ ¬´–ü–æ–º–æ—â—å¬ª",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏ ---
async def help_button(update: Update, context):
    await update.callback_query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")],
        [InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", url=SUPPORT_LINK)]
    ]
    
    await update.callback_query.edit_message_text(
        "üõ† <b>–¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π:\n"
        "1. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ <b>–Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç</b>\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—É –∂–µ —Å—Å—ã–ª–∫—É, —á—Ç–æ –∏ –≤ –±–æ—Ç–µ\n"
        "3. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
async def check_registration(update: Update, context):
    user_id = update.effective_user.id
    
    try:
        with open(REGISTERED_USERS_FILE, 'r') as f:
            if str(user_id) in f.read():
                await update.callback_query.edit_message_text(
                    "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª!",
                    parse_mode="HTML"
                )
            else:
                keyboard = [
                    [InlineKeyboardButton("üîπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_URL)],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
                ]
                
                await update.callback_query.edit_message_text(
                    "‚ùå <b>–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
                    "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="HTML"
                )
    except FileNotFoundError:
        await update.callback_query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ---
async def back_to_start(update: Update, context):
    await start(update, context)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é start, –Ω–æ –¥–ª—è callback

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def run_bot():
    bot_app = Application.builder().token(BOT_TOKEN).build()
    
    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(CallbackQueryHandler(check_registration, pattern="^check_reg$"))
    bot_app.add_handler(CallbackQueryHandler(help_button, pattern="^help$"))
    bot_app.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))
    
    await bot_app.initialize()
    await bot_app.start()
    await bot_app.updater.start_polling(drop_pending_updates=True)
    
    return bot_app

def run_flask():
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 10000)))

if __name__ == "__main__":
    if not os.path.exists(REGISTERED_USERS_FILE):
        open(REGISTERED_USERS_FILE, 'w').close()
    
    from threading import Thread
    flask_thread = Thread(target=run_flask)
    flask_thread.start()
    
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    bot = loop.run_until_complete(run_bot())
    
    try:
        loop.run_forever()
    except KeyboardInterrupt:
        loop.run_until_complete(bot.stop())
