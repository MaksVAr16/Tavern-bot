import os
import logging
import threading
import requests
import time
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Self-ping (–¥–ª—è Render Free)
def self_ping():
    while True:
        try:
            requests.get("https://–í–ê–®_–ë–û–¢.onrender.com")  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL!
            logger.info("‚úÖ Self-ping –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ self-ping: {e}")
        time.sleep(240)  # –ö–∞–∂–¥—ã–µ 4 –º–∏–Ω—É—Ç—ã

app = Flask(__name__)
@app.route('/')
def wake_up():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–æ—Å—Ç–∞–≤—å —Å–≤–æ–∏, –Ω–æ —É–±–µ–¥–∏—Å—å, —á—Ç–æ callback_data —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å pattern)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url="https://1wilib.life/?open=register&p=2z3v")],
        [InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="check_reg")],
        [InlineKeyboardButton("‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="help")]
    ]
    await update.message.reply_text(
        "üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "1. –ù–∞–∂–º–∏ ¬´üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª\n"
        "2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üìû –ú–µ–Ω–µ–¥–∂–µ—Ä", url="https://t.me/Maksimmm16")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    await query.edit_message_text(
        "üõ† <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n"
        "1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–Ω–æ–≤—ã–π</b> –∞–∫–∫–∞—É–Ω—Ç\n\n"
        "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start(query.message, context)  # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é

def run_bot():
    app_bot = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—É–±–µ–¥–∏—Å—å, —á—Ç–æ pattern —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å callback_data!)
    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    app_bot.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    app_bot.run_polling(
        allowed_updates=Update.ALL_TYPES,
        close_loop=False,
        stop_signals=[]
    )

if __name__ == "__main__":
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if not os.environ.get("BOT_STARTED"):
        os.environ["BOT_STARTED"] = "1"
        threading.Thread(target=self_ping, daemon=True).start()
        threading.Thread(target=app.run, kwargs={'host':'0.0.0.0','port':8080}, daemon=True).start()
        run_bot()
