import os
import logging
import asyncio
from threading import Thread, Lock
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler
from flask import Flask, request

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot_debug.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
PARTNER_URL = "https://1wilib.life/?open=register&p=2z3v"
SUPPORT_LINK = "https://t.me/Maksimmm16"
SERVER_URL = "https://tavern-bot.onrender.com"

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
REGISTERED_USERS_FILE = "registered_users.txt"
file_lock = Lock()  # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª

# --- Flask –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ ---
app = Flask(__name__)

@app.route('/1win_webhook', methods=['GET', 'POST'])
def handle_1win_webhook():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        user_id = request.args.get('user_id') or (request.json and request.json.get('user_id'))
        status = request.args.get('status') or (request.json and request.json.get('status'))
        
        if not user_id:
            return "user_id required", 400
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: user_id={user_id}, status={status}")
        
        if status == "success":
            with file_lock:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                registered = False
                if os.path.exists(REGISTERED_USERS_FILE):
                    with open(REGISTERED_USERS_FILE, 'r') as f:
                        registered = str(user_id) in f.read()
                
                if not registered:
                    with open(REGISTERED_USERS_FILE, 'a') as f:
                        f.write(f"{user_id}\n")
                    logger.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_id}")
        
        return "OK", 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        return "Server Error", 500

# --- –í—Å–µ –≤–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
async def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üîπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_URL)],
        [
            InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="check_reg"),
            InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!\n\n"
            "1. –ù–∞–∂–º–∏ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª\n"
            "2. –°–æ–∑–¥–∞–π <b>–ù–û–í–´–ô –∞–∫–∫–∞—É–Ω—Ç</b> (–≤—Ö–æ–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–µ –ø–æ–¥–æ–π–¥—ë—Ç!)\n"
            "3. –í–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è¬ª\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –Ω–∞–∂–º–∏ ¬´–ü–æ–º–æ—â—å¬ª",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!\n\n"
            "1. –ù–∞–∂–º–∏ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª\n"
            "2. –°–æ–∑–¥–∞–π <b>–ù–û–í–´–ô –∞–∫–∫–∞—É–Ω—Ç</b> (–≤—Ö–æ–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–µ –ø–æ–¥–æ–π–¥—ë—Ç!)\n"
            "3. –í–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è¬ª\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –Ω–∞–∂–º–∏ ¬´–ü–æ–º–æ—â—å¬ª",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )

async def help_button(update: Update, context):
    await update.callback_query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")],
        [InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", url=SUPPORT_LINK)]
    ]
    
    await update.callback_query.edit_message_text(
        "üõ† <b>–¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π:\n"
        "1. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ <b>–Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç</b>\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—É –∂–µ —Å—Å—ã–ª–∫—É, —á—Ç–æ –∏ –≤ –±–æ—Ç–µ\n"
        "3. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def check_registration(update: Update, context):
    user_id = update.effective_user.id
    
    try:
        with open(REGISTERED_USERS_FILE, 'r') as f:
            if str(user_id) in f.read():
                await update.callback_query.edit_message_text(
                    "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª!",
                    parse_mode="HTML"
                )
            else:
                keyboard = [
                    [InlineKeyboardButton("üîπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_URL)],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
                ]
                
                await update.callback_query.edit_message_text(
                    "‚ùå <b>–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
                    "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="HTML"
                )
    except FileNotFoundError:
        await update.callback_query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def back_to_start(update: Update, context):
    await start(update, context)

# --- –ó–∞–ø—É—Å–∫ ---
async def run_bot():
    bot_app = Application.builder().token(BOT_TOKEN).build()
    
    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(CallbackQueryHandler(check_registration, pattern="^check_reg$"))
    bot_app.add_handler(CallbackQueryHandler(help_button, pattern="^help$"))
    bot_app.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))
    
    await bot_app.initialize()
    await bot_app.start()
    await bot_app.updater.start_polling(drop_pending_updates=True)
    
    return bot_app

def run_flask():
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 10000)))

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(REGISTERED_USERS_FILE):
        with open(REGISTERED_USERS_FILE, 'w') as f:
            f.write("")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ —Ñ–æ–Ω–µ
    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        bot = loop.run_until_complete(run_bot())
        loop.run_forever()
    except KeyboardInterrupt:
        loop.run_until_complete(bot.stop())
    finally:
        loop.close()
