import os
import logging
import threading
import requests
import time
import asyncio
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ================== #
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def self_ping():
    while True:
        try:
            requests.get("https://tavern-bot.onrender.com")
            logger.info("Self-ping –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ self-ping: {e}")
        time.sleep(240)

app = Flask(__name__)

@app.route('/')
def wake_up():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ================== #
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPPORT_LINK = "https://t.me/Maksimmm16"
PARTNER_LINK = "https://1wilib.life/?open=register&p=2z3v"
VIP_BOT_LINK = "https://t.me/TESTVIPP_BOT"
CHANNEL_LINK = "https://t.me/jacktaverna"
REG_CHANNEL = -1002739343436
DEPOSIT_CHANNEL = -1002690483167
IMAGE_URL = "https://i.imgur.com/X8aN0Lk.jpg"  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫–∞

TEXTS = {
    "start": "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –ö–∞–∑–∏–Ω–æ!\n\nüî• –ü–µ—Ä–≤—ã–µ 50 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–ª—É—á–∞—é—Ç +1 –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ!\n\nüîπ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä—É–ª–µ—Ç–∫–µ:\n1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n3. –ü–æ–ª—É—á–∏—Ç–µ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏—è",
    "help": "üõ† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç (—Å—Ç–∞—Ä—ã–µ –Ω–µ –ø–æ–¥–æ–π–¥—É—Ç)\n2. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç\n3. –î–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É",
    "reg_failed": "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã:\n1. –°–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç\n2. –ü–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –∫–Ω–æ–ø–∫–∏ ¬´üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª\n3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞, –∞ –Ω–µ —Å—Ç–∞—Ä–æ–≥–æ",
    "deposit_failed": "‚ö†Ô∏è –î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {level} —Ç—Ä–µ–±—É–µ—Ç—Å—è:\n1. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç {deposit}‚ÇΩ\n2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏\n3. –°–æ–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ —Å —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞",
    "vip": "üíé –°–ï–ù–°–ê–¶–ò–Ø! –í–´ –í–´–ò–ì–†–ê–õ–ò VIP-–î–û–°–¢–£–ü!\n\nüî• –í—ã –≤–æ—à–ª–∏ –≤ —Ç–æ–ø-0.1% –∏–≥—Ä–æ–∫–æ–≤!\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:\n‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã\n‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏",
    "reg_success": "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –ö–∞–∑–∏–Ω–æ!\n\nüéâ –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –£—Ä–æ–≤–Ω–µ 1!",
    "deposit_success": "‚úÖ –î–µ–ø–æ–∑–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –£—Ä–æ–≤–µ–Ω—å {level}!\n\nüî• –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {attempts} –≤—Ä–∞—â–µ–Ω–∏–π!"
}

def get_start_keyboard():
    return [
        [InlineKeyboardButton("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_LINK)],
        [InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="check_reg")],
        [InlineKeyboardButton("‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="help")]
    ]

def get_help_keyboard():
    return [
        [InlineKeyboardButton("üìû –ú–µ–Ω–µ–¥–∂–µ—Ä", url=SUPPORT_LINK)],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]

def get_reg_failed_keyboard():
    return [
        [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", url=PARTNER_LINK)],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]

def get_level_keyboard(level):
    web_app_url = "https://your-webapp.com/roulette"
    return [
        [InlineKeyboardButton(f"üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É ({LEVELS[level]['attempts']} –ø–æ–ø—ã—Ç–æ–∫)", web_app=WebAppInfo(url=f"{web_app_url}?level={level}"))],
        [InlineKeyboardButton("üíé VIP-–¥–æ—Å—Ç—É–ø", url=PARTNER_LINK)],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", url=SUPPORT_LINK)]
    ]

def get_deposit_failed_keyboard(level):
    return [
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url=PARTNER_LINK)],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_dep_{level}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_level_{level-1}" if level > 1 else "back_to_start")]
    ]

def get_vip_keyboard():
    return [
        [InlineKeyboardButton("üíé –ü–æ–ª—É—á–∏—Ç—å VIP", url=PARTNER_LINK)],
        [InlineKeyboardButton("üéÅ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑", url=VIP_BOT_LINK)],
        [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", url=SUPPORT_LINK)]
    ]

LEVELS = {
    1: {"attempts": 3, "deposit": 0, "text": "üéâ –£—Ä–æ–≤–µ–Ω—å 1: 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏—è!\n\n–í—ã–∏–≥—Ä—ã—à–∏ –¥–æ 5000‚ÇΩ!"},
    2: {"attempts": 5, "deposit": 500, "text": "üí∞ –£—Ä–æ–≤–µ–Ω—å 2: 5 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 500‚ÇΩ)"},
    3: {"attempts": 10, "deposit": 2000, "text": "üöÄ –£—Ä–æ–≤–µ–Ω—å 3: 10 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 2000‚ÇΩ)"},
    4: {"attempts": 15, "deposit": 5000, "text": "ü§ë –£—Ä–æ–≤–µ–Ω—å 4: 15 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 5000‚ÇΩ)"},
    5: {"attempts": 25, "deposit": 15000, "text": "üèÜ –£—Ä–æ–≤–µ–Ω—å 5: 25 –≤—Ä–∞—â–µ–Ω–∏–π (–¥–µ–ø–æ–∑–∏—Ç –æ—Ç 15000‚ÇΩ)"}
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_photo(
        chat_id=update.message.chat_id,
        photo=IMAGE_URL,
        caption=TEXTS["start"],
        reply_markup=InlineKeyboardMarkup(get_start_keyboard())
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await context.bot.send_photo(
        chat_id=query.message.chat_id,
        photo=IMAGE_URL,
        caption=TEXTS["help"],
        reply_markup=InlineKeyboardMarkup(get_help_keyboard())
    )

async def check_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    try:
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π
        # –í —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
        found = True
        
        if found:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=IMAGE_URL,
                caption=LEVELS[1]["text"],
                reply_markup=InlineKeyboardMarkup(get_level_keyboard(1))
            )
        else:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=TEXTS["reg_failed"],
                reply_markup=InlineKeyboardMarkup(get_reg_failed_keyboard())
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
        )

async def check_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    level = int(query.data.split('_')[-1])
    user_id = query.from_user.id
    deposit = LEVELS[level]["deposit"]
    
    try:
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º
        # –í —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
        found = True
        
        if found:
            next_level = level + 1 if level < 5 else "vip"
            
            if next_level == "vip":
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=IMAGE_URL,
                    caption=TEXTS["vip"],
                    reply_markup=InlineKeyboardMarkup(get_vip_keyboard()))
            else:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=IMAGE_URL,
                    caption=LEVELS[next_level]["text"],
                    reply_markup=InlineKeyboardMarkup(get_level_keyboard(next_level)))
        else:
            text = TEXTS["deposit_failed"].format(level=level, deposit=deposit)
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=text,
                reply_markup=InlineKeyboardMarkup(get_deposit_failed_keyboard(level)))
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_level_{level-1}")]
            ])
        )

async def back_to_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    level = int(query.data.split('_')[-1])
    
    await context.bot.send_photo(
        chat_id=query.message.chat_id,
        photo=IMAGE_URL,
        caption=LEVELS[level]["text"],
        reply_markup=InlineKeyboardMarkup(get_level_keyboard(level))
    )

async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await context.bot.send_photo(
        chat_id=query.message.chat_id,
        photo=IMAGE_URL,
        caption=TEXTS["start"],
        reply_markup=InlineKeyboardMarkup(get_start_keyboard())
    )

def run_bot():
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    application.add_handler(CallbackQueryHandler(check_registration, pattern="^check_reg$"))
    application.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))
    
    for level in range(1, 6):
        application.add_handler(CallbackQueryHandler(
            lambda update, ctx, lvl=level: check_deposit(update, ctx, lvl),
            pattern=f"^check_dep_{level}$"
        ))
        
        application.add_handler(CallbackQueryHandler(
            lambda update, ctx, lvl=level: back_to_level(update, ctx, lvl),
            pattern=f"^back_to_level_{level}$"
        ))
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    threading.Thread(target=self_ping, daemon=True).start()
    threading.Thread(
        target=app.run, 
        kwargs={'host': '0.0.0.0', 'port': 8080},
        daemon=True
    ).start()
    run_bot()
