import os
import logging
import threading
import requests
import time
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== SELF-PING (–ê–ù–¢–ò-–ó–ê–°–´–ü–ê–ù–ò–ï) =====
def self_ping():
    while True:
        try:
            requests.get("https://–≤–∞—à-–ø—Ä–æ–µ–∫—Ç.onrender.com")  # !!! –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô URL !!!
            logger.info("‚úÖ Self-ping –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ self-ping: {e}")
        time.sleep(240)  # –ö–∞–∂–¥—ã–µ 4 –º–∏–Ω—É—Ç—ã

# ===== FLASK (–î–õ–Ø –†–ï–ù–î–ï–†–ê) =====
app = Flask(__name__)
@app.route('/')
def wake_up():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

# ===== –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• =====
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPPORT_LINK = "https://t.me/Maksimmm16"
PARTNER_LINK = "https://1wilib.life/?open=register&p=2z3v"
REG_CHANNEL = "@+4T5JdFC8bzBkZmIy"
DEPOSIT_CHANNEL = "@+Vkx46VQSlTk3ZmYy"

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_LINK)],
        [InlineKeyboardButton("üí∞ –Ø –ø–æ–ø–æ–ª–Ω–∏–ª —Å—á—ë—Ç", callback_data="check_deposit")]
    ]
    await update.message.reply_text(
        "üé∞ <b>–¢–≤–æ–π –≤—ã–∏–≥—Ä—ã—à —É–∂–µ –±–ª–∏–∑–∫–æ!</b>\n\n"
        "1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
        "2Ô∏è‚É£ –ü–æ–ø–æ–ª–Ω–∏ —Å—á—ë—Ç –æ—Ç 500‚ÇΩ\n"
        "3Ô∏è‚É£ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ –∑–∞–±–∏—Ä–∞–π –ø—Ä–∏–∑—ã!\n\n"
        "üî• <i>–ü–µ—Ä–≤—ã–µ 10 –∏–≥—Ä–æ–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–∞—é—Ç —É–¥–≤–æ–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å!</i>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def check_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    async for msg in context.bot.get_chat_history(REG_CHANNEL, limit=100):
        if str(user_id) in msg.text:
            keyboard = [
                [InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É", callback_data="spin")],
                [InlineKeyboardButton("üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç", url=PARTNER_LINK)]
            ]
            await update.message.reply_text(
                "üéâ <b>–¢—ã –≤ –∏–≥—Ä–µ!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –ø–æ–ø–æ–ª–Ω–∏ —Å—á—ë—Ç –æ—Ç 500‚ÇΩ ‚Äî –∏ –∫—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É!\n\n"
                "‚ö° <i>–°–µ–π—á–∞—Å –∫–∞–∑–∏–Ω–æ –¥–∞—ë—Ç –±–æ–Ω—É—Å—ã –≤ 2 —Ä–∞–∑–∞ —á–∞—â–µ!</i>",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
            return
    await update.message.reply_text("‚ùå –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

async def check_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    async for msg in context.bot.get_chat_history(DEPOSIT_CHANNEL, limit=100):
        if str(user_id) in msg.text:
            keyboard = [[InlineKeyboardButton("üé° –ö–†–£–¢–ò–¢–¨ –†–£–õ–ï–¢–ö–£", callback_data="spin")]]
            await update.message.reply_text(
                "üí∞ <b>–¢–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç –∑–∞—á–∏—Å–ª–µ–Ω!</b>\n\n"
                "–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –∫—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É –∏ —Å—Ä—ã–≤–∞—Ç—å –∫—É—à!\n\n"
                "üöÄ <i>–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —É–∂–µ —Ä–∞–∑–æ–≥—Ä–µ—Ç...</i>",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
            return
    await update.message.reply_text("‚ÑπÔ∏è –ü–æ–ø–æ–ª–Ω–∏ —Å—á—ë—Ç –æ—Ç 500‚ÇΩ, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!")

async def spin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prize = "–§—Ä–∏—Å–ø–∏–Ω 50$"
    keyboard = [
        [InlineKeyboardButton("üéÅ –ó–ê–ë–†–ê–¢–¨ –ü–†–ò–ó", callback_data=f"claim_{prize}")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", url=SUPPORT_LINK)]
    ]
    await update.message.reply_text(
        f"üéÅ <b>–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {prize}!</b>\n\n"
        "–≠—Ç–æ—Ç –ø—Ä–∏–∑ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ 5% –∏–≥—Ä–æ–∫–æ–≤ ‚Äî —Ç—ã –≤–µ–∑—É–Ω—á–∏–∫!\n\n"
        "‚è≥ <i>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç...</i>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê (–ë–ï–ó –ö–û–ù–§–õ–ò–ö–¢–û–í) =====
def run_bot():
    app_bot = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CallbackQueryHandler(check_registration, pattern="^check_reg$"))
    app_bot.add_handler(CallbackQueryHandler(check_deposit, pattern="^check_deposit$"))
    app_bot.add_handler(CallbackQueryHandler(spin_handler, pattern="^spin$"))
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    app_bot.run_polling(
        allowed_updates=Update.ALL_TYPES,
        close_loop=False,
        stop_signals=[]
    )

if __name__ == "__main__":
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    if not os.environ.get("BOT_STARTED"):
        os.environ["BOT_STARTED"] = "1"
        
        # –ó–∞–ø—É—Å–∫ self-ping –∏ Flask –≤ —Ñ–æ–Ω–µ
        threading.Thread(target=self_ping, daemon=True).start()
        threading.Thread(target=app.run, kwargs={'host':'0.0.0.0','port':8080}, daemon=True).start()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        run_bot()
