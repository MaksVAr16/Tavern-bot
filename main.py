import os
import logging
import threading
import requests
import time
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# Self-ping —Å–∏—Å—Ç–µ–º–∞
def self_ping():
    while True:
        try:
            requests.get("https://tavern-bot.onrender.com")
        except Exception as e:
            logging.error(f"Self-ping error: {e}")
        time.sleep(240)

# Flask —Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)
@app.route('/')
def wake_up():
    return "Tavern Bot is alive!"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPPORT_LINK = "https://t.me/Maksimmm16"
PARTNER_LINK = "https://1wilib.life/?open=register&p=2z3v"
REG_CHANNEL = "@+4T5JdFC8bzBkZmIy"  # –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

# –¢–µ–∫—Å—Ç—ã
TEXTS = {
    "start": (
        "üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!</b>\n\n"
        "1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
        "2Ô∏è‚É£ –ü–æ–ª—É—á–∏ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏—è\n\n"
        "üî• <i>–ü–µ—Ä–≤—ã–µ 50 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–ª—É—á–∞—é—Ç –±–æ–Ω—É—Å +1 –≤—Ä–∞—â–µ–Ω–∏–µ!</i>"
    ),
    "registered": (
        "üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
        "–¢–≤–æ–∏ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã!\n\n"
        "‚ö° <i>–ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ –∑–∞–±–∏—Ä–∞–π –ø—Ä–∏–∑—ã!</i>"
    )
}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGES = {
    "start": "https://i.ibb.co/7Q78Zy3/test-image.jpg",
    "registered": "https://i.ibb.co/7Q78Zy3/test-image.jpg"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=PARTNER_LINK)],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="check_reg")]
    ]
    await update.message.reply_photo(
        photo=IMAGES["start"],
        caption=TEXTS["start"],
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def check_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    async for msg in context.bot.get_chat_history(REG_CHANNEL, limit=100):
        if str(user_id) in msg.text:
            keyboard = [
                [InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É (3 –ø–æ–ø—ã—Ç–∫–∏)", callback_data="spin")],
                [InlineKeyboardButton("üíé VIP-–¥–æ—Å—Ç—É–ø", url=PARTNER_LINK)]
            ]
            await update.message.reply_photo(
                photo=IMAGES["registered"],
                caption=TEXTS["registered"],
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
            return
    
    await update.message.reply_text("‚ùå –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–∂–º–∏ /start")

async def spin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prize = "–§—Ä–∏—Å–ø–∏–Ω 50$"  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    keyboard = [
        [InlineKeyboardButton("üéÅ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑", url=PARTNER_LINK)],
        [InlineKeyboardButton("üîÑ –ö—Ä—É—Ç–∏—Ç—å –µ—â—ë", callback_data="spin")]
    ]
    await update.message.reply_text(
        text=f"üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª: {prize}!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def run_bot():
    bot_app = Application.builder().token(BOT_TOKEN).build()
    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(CallbackQueryHandler(check_registration, pattern="^check_reg$"))
    bot_app.add_handler(CallbackQueryHandler(spin_handler, pattern="^spin$"))
    bot_app.run_polling()

if __name__ == "__main__":
    threading.Thread(target=self_ping, daemon=True).start()
    threading.Thread(target=app.run, kwargs={'host':'0.0.0.0','port':10000}).start()
    run_bot()
