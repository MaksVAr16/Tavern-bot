import os
import logging
import threading
import requests
import time
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ================== #
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Self-ping –¥–ª—è Render
def self_ping():
    while True:
        try:
            requests.get("https://tavern-bot.onrender.com")
            logger.info("‚úÖ Self-ping –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ self-ping: {e}")
        time.sleep(240)

app = Flask(__name__)
@app.route('/')
def wake_up():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ================== #
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–µ—Ä—ë—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞ .env
SUPPORT_LINK = "https://t.me/Maksimmm16"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
PARTNER_LINK = "https://1wilib.life/?open=register&p=2z3v"  # –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞
VIP_BOT_LINK = "https://t.me/TESTVIPP_BOT"  # –°—Å—ã–ª–∫–∞ –Ω–∞ VIP-–±–æ—Ç–∞
CHANNEL_LINK = "https://t.me/jacktaverna"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
REG_CHANNEL = -1002739343436  # ID –∫–∞–Ω–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!)
DEPOSIT_CHANNEL = -1002690483167  # ID –∫–∞–Ω–∞–ª–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!)

# ================== –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ================== #
"""
–ö–ê–ö –ó–ê–ú–ï–ù–ò–¢–¨ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø:
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ imgur.com
2. –í–æ–∑—å–º–∏—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É (–æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .jpg/.png)
3. –í—Å—Ç–∞–≤—å—Ç–µ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—É—â–∏—Ö —Å—Å—ã–ª–æ–∫
"""
IMAGES = {
    "start": "https://i.imgur.com/X8aN0Lk.jpg",  # –î–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    "help": "https://i.imgur.com/X8aN0Lk.jpg",  # –î–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–º–æ—â–∏
    "level_1": "https://i.imgur.com/X8aN0Lk.jpg",  # –î–ª—è —É—Ä–æ–≤–Ω—è 1
    "level_2": "https://i.imgur.com/X8aN0Lk.jpg",  # –î–ª—è —É—Ä–æ–≤–Ω—è 2
    "level_3": "https://i.imgur.com/X8aN0Lk.jpg",  # –î–ª—è —É—Ä–æ–≤–Ω—è 3
    "level_4": "https://i.imgur.com/X8aN0Lk.jpg",  # –î–ª—è —É—Ä–æ–≤–Ω—è 4
    "level_5": "https://i.imgur.com/X8aN0Lk.jpg",  # –î–ª—è —É—Ä–æ–≤–Ω—è 5
    "vip": "https://i.imgur.com/X8aN0Lk.jpg"  # –î–ª—è VIP-—Å–æ–æ–±—â–µ–Ω–∏—è
}

# ================== –¢–ï–ö–°–¢–´ –°–û–û–ë–©–ï–ù–ò–ô ================== """
"""
–ö–ê–ö –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –¢–ï–ö–°–¢:
1. –ú–µ–Ω—è–π—Ç–µ —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫
2. –î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \n
3. –î–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - <b>—Ç–µ–∫—Å—Ç</b>
4. –î–ª—è –∫—É—Ä—Å–∏–≤–∞ - <i>—Ç–µ–∫—Å—Ç</i>
"""
TEXTS = {
    "start": (
        "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP –ö–∞–∑–∏–Ω–æ!\n\n"
        "üî• –ü–µ—Ä–≤—ã–µ 50 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–ª—É—á–∞—é—Ç +1 –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ!\n\n"
        "üîπ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä—É–ª–µ—Ç–∫–µ:\n"
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
        "2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏—è"
    ),
    "help": (
        "üõ† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç (—Å—Ç–∞—Ä—ã–µ –Ω–µ –ø–æ–¥–æ–π–¥—É—Ç)\n"
        "2. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç\n"
        "3. –î–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É"
    ),
    "reg_failed": (
        "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n\n"
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã:\n"
        "1. –°–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç\n"
        "2. –ü–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –∫–Ω–æ–ø–∫–∏ ¬´üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª"
    ),
    "deposit_failed": (
        "‚ö†Ô∏è –î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
        "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {level} —Ç—Ä–µ–±—É–µ—Ç—Å—è:\n"
        "1. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç {deposit}‚ÇΩ\n"
        "2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏"
    ),
    "vip": (
        "üíé –°–ï–ù–°–ê–¶–ò–Ø! –í–´ –í–´–ò–ì–†–ê–õ–ò VIP-–î–û–°–¢–£–ü!\n\n"
        "üî• –í—ã –≤–æ—à–ª–∏ –≤ —Ç–æ–ø-0.1% –∏–≥—Ä–æ–∫–æ–≤!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:\n"
        "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
        "‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã\n"
        "‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏"
    )
}

# ================== –£–†–û–í–ù–ò –ò –ö–ù–û–ü–ö–ò ================== #
# (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ... [–∑–¥–µ—Å—å –∏–¥—É—Ç –≤—Å–µ –≤–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ get_*_keyboard –∏ LEVELS]

# ================== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ================== #
async def check_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    registered = False
    
    try:
        async for msg in context.bot.get_chat_history(chat_id=REG_CHANNEL, limit=100):
            if str(user_id) in msg.text:
                registered = True
                break
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await query.edit_message_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
        )
        return
    
    if registered:
        await show_level(query, 1)
    else:
        await query.edit_message_text(
            TEXTS["reg_failed"],
            reply_markup=InlineKeyboardMarkup(get_reg_failed_keyboard()),
            parse_mode="HTML"
        )

async def check_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE, level: int):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    deposit_found = False
    
    try:
        required_amount = LEVELS[level]["deposit"]
        async for msg in context.bot.get_chat_history(chat_id=DEPOSIT_CHANNEL, limit=100):
            if str(user_id) in msg.text and f"{required_amount}‚ÇΩ" in msg.text:
                deposit_found = True
                break
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞: {e}")
        await query.edit_message_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_level_{level-1}")]
            ])
        )
        return
    
    if deposit_found:
        await show_level(query, level)
    else:
        await query.edit_message_text(
            TEXTS["deposit_failed"].format(level=level, deposit=LEVELS[level]["deposit"]),
            reply_markup=InlineKeyboardMarkup(get_deposit_failed_keyboard(level)),
            parse_mode="HTML"
        )

# ================== –ó–ê–ü–£–°–ö ================== #
def run_bot():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    application.add_handler(CallbackQueryHandler(check_registration, pattern="^check_reg$"))
    application.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))
    
    # –î–ª—è —É—Ä–æ–≤–Ω–µ–π 2-5
    for level in range(1, 6):
        application.add_handler(CallbackQueryHandler(
            lambda update, context, lvl=level: show_level(update.callback_query, lvl),
            pattern=f"^back_to_level_{level}$"
        ))
        application.add_handler(CallbackQueryHandler(
            lambda update, context, lvl=level: check_deposit(update, context, lvl),
            pattern=f"^check_dep_{lvl}$"
        ))
    
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        close_loop=False,
        drop_pending_updates=True
    )

if __name__ == "__main__":
    if not os.environ.get("BOT_STARTED"):
        os.environ["BOT_STARTED"] = "1"
        threading.Thread(target=self_ping, daemon=True).start()
        threading.Thread(target=app.run, kwargs={'host':'0.0.0.0','port':8080}, daemon=True).start()
        run_bot()
